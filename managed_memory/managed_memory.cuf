program managed_memory_example
  use cudafor
  implicit none

  ! Let's make the array ~6GB
  ! 1.5 billion single-precision real numbers = 1.5e9 * 4 bytes = 6e9 bytes = 6GB
  integer(8), parameter :: N = 1500000000_8   ! Use 8-byte integer for large N
  real, managed :: d_array(N)
  integer(8) :: i
  integer :: istat

  print *, 'Array size is ~', N * 4 / 1024**3, 'GB'

  ! Initialize the array on the device
  !$cuf kernel do <<<*,*>>>
  do i = 1, N
     d_array(i) = i * 0.5
  end do

  istat = cudaDeviceSynchronize()
  if (istat /= cudaSuccess) then
    print *, 'CUDA error during kernel execution: ', istat
    stop
  end if

  ! Accessing elements from the host will trigger page migrations
  print *, 'First element: ', d_array(1)
  print *, 'Last element: ', d_array(N)

end program managed_memory_example
! set environment:
! export NVCOMPILER_CUDAFOR_DEVICE_IS_MANAGED=1
! nvfortran managed_memory.cuf -o managed_memory
! handled 5GB array (larger than GPU RAM) while consuming only 1GB GPU memory!
